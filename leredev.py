import telebot
import requests

WEATHER_API_KEY = 'token'
api_key = 'key'
bot = telebot.TeleBot('token2')
google_api_key = 'key2'
google_cx = 'cx'

# —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
history = {}

@bot.message_handler(commands=['num'])
def start_handler(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +1234567890:")


@bot.message_handler(regexp="^\+\d{11}$")
def phone_handler(message):
    phone_number = message.text
    url = f'http://apilayer.net/api/validate?access_key={api_key}&number={phone_number}'
    response = requests.get(url)
    data = response.json()
    if data['valid']:
        country = data['country_name']
        location = data['location']
        carrier = data['carrier']
        bot.send_message(message.chat.id, f"–°—Ç—Ä–∞–Ω–∞: {country}\n–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}\n–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∑–∏: {carrier}")
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton('–ü–æ–∏—Å–∫', request_location=False, request_contact=False), row_width=2)
    bot.send_message(message.chat.id, 'üëã | –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–∏—Å–∫", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.',
                     reply_markup=markup)


@bot.message_handler(func=lambda message: True)
def search_images(message):
    if message.text == '–ü–æ–∏—Å–∫':
        markup = telebot.types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, 'üîç | –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:')
        bot.register_next_step_handler(message, process_query)
    elif message.text == '/history':
        # –≤—ã–≤–æ–¥–∏–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.chat.id
        if user_id in history:
            bot.send_message(user_id, 'üìú | –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:\n' + '\n'.join(history[user_id]))
        else:
            bot.send_message(user_id, 'üìú | –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.')
    else:
        bot.send_message(message.chat.id, 'üîç | –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–∏—Å–∫", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.')


def process_query(message):
    query = message.text
    images = search_images_google(query)
    if images:
        for image in images:
            response = requests.get(image)
            if response.status_code == 200:
                file = response.content
                try:
                    bot.send_photo(message.chat.id, file)
                except telebot.apihelper.ApiException:
                    bot.send_message(message.chat.id, 'üî¥ | –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.')
            else:
                bot.send_message(message.chat.id, 'üî¥ | –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.')
        # –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.chat.id
        if user_id not in history:
            history[user_id] = []
        history[user_id].append(query)
    else:
        bot.send_message(message.chat.id, '‚ùå | –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton('–ü–æ–∏—Å–∫', request_location=False, request_contact=False), row_width=2)
    bot.send_message(message.chat.id, 'üîç | –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–∏—Å–∫", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.', reply_markup=markup)

def search_images_google(query):
    url = f'https://www.googleapis.com/customsearch/v1?key={google_api_key}&cx={google_cx}&q={query}&searchType=image'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        images = [item['link'] for item in data.get('items', [])]
        return images
    else:
        return None



bot.polling()
